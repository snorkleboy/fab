import featurePackage from "../featurePackage";
const fs = require("fs");

describe("Autogenerated FeaturePackage sanity tests",()=> {

    it("package is array", () => {
        expect(Array.isArray(featurePackage)).toBeTruthy();
    })
    it("package is array of componentPackages", () => {
        featurePackage.forEach(pack => {
            const componentPackage = pack.componentPackage;
            expect(componentPackage).toBeTruthy();
        })
    })
    it("every package has atleast a component and destination", () => {
        featurePackage.forEach(pack => {
            const componentPackage = pack.componentPackage;
            expect(componentPackage.component).toBeTruthy();
            expect(componentPackage.destinationFeaturePoint).toBeTruthy();

        })
    })
    it("if componentPackage has decorators they are of the form {name,props}", () => {
        featurePackage.forEach(pack => {
            const componentPackage = pack.componentPackage;
            if (componentPackage.decorators) {
                componentPackage.decorators.forEach(decorator => {
                    expect(decorator.name).toBeTruthy();
                    expect(decorator.props).toBeTruthy();
                })
            }
        })
    })
    it("every decorator is registered in decorators.json",()=>{
        const decoratorNames = [];
        featurePackage.forEach(pack => {
            const componentPackage = pack.componentPackage;
            if(componentPackage.decorators){
                componentPackage.decorators.forEach(dec =>decoratorNames.push(dec.name));
            }
        })

        if (decoratorNames.length>0){
            const exists = fs.existsSync("../decorators.json")
            expect(exists).toBeTruthy();
            if(exists){
                const string = fs.readFileSync("../decorators.json")
                const registeredDecorators = JSON.parse(string);
                decoratorNames.forEach(usedName=>{
                    expect(registeredDecorators[usedName]).toBeTruthy();
                })
            }
        }
    })
});